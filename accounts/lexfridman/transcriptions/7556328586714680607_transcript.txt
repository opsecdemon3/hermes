# Transcription for Video 7556328586714680607
Title: Pavel Durov on PHP and scaling VK to millions of users - clip from Le...
Timestamp: 2025-10-22T17:33:04.165638
==================================================

As for the stack, I started from PHP and MySQL. They've been Linux, but very soon I realized I need to optimize this.  I started using Memcached Apache servers. When I went on enough anymore, we had to set up Engine X and my brother was still living in Germany.  So he couldn't help me much for the first year of building BK. Sometimes I would manage to get through to him.  To recall I would use an old school phone to call him with wires.  I said, what do I do? How do I install this single Engine X? I'm not a Linux guy.  If he felt particularly kind that day and not too busy, he would show me the way to do it or set it up himself.  But for the most part, I had to rely on just myself.  Having him there, they were helped when we started to grow fast and start to scale it.  Because the first, you realize one server is not enough. I need to buy another one.  Then another one. The database should be in any different server. Then you have to split the database into tables.  Then you have to come up with a way to chart the tables using some criteria that would make sense of wouldn't break your user experience.  When we got to over a million users and beyond the dozen of servers, we surviving without the input from my brother in terms of taking care of the scaling aspect of it became impossible.  I remember asking him to come back.  He said, you need to help me with this thing. It's starting to be really big.  What was worse is that since we became popular, somebody started to do DDoS attacks on us.  This is always happens.  Right.  And then we had people that wanted to buy a share of VK.  And interestingly, every time we had a negotiation day, the DDoS attacks intensified.  So we had to come up with a way to fight it.  I remember having many sleepless nights trying to figure it out.  So that was your introduction to all kinds of bad actors.  DDoS business.  Then later you'd find out there's such a thing called politics.  And then later geopolitics. But this is the initial stages.  It's not just about creating cool stuff.  It's having to deal with, as you now have to deal with a telegram,  is sees of bad actors trying to test the limits of the system, trying to break the system.  Unfortunately, if we didn't have bad actors and pressure, you will be the best job ever.  You just get to create, yeah.  And so the help from your brother, like you mentioned in genetics and charting the tables,  some of this scaling issue is algorithmic nature.  It's almost like theoretical computer science.  It's not just about like buying more computers.  It's figuring out how to algorithmically make everything work extremely fast.  So some of this mathematics, some of this pure engineering,  but some of this mathematics.  Yeah, so at that stage, I could do the basic stuff.  I could understand how I implement scalability into the code base,  how we showed my tables in the database where I include memcached instead of direct requests to the database.  That was quite easy because it was still PHP back in the day.  When my brother got back from Germany somewhere around 2008,  I asked him, can we make it even more efficient?  Can we make it super fast?  And at the same time, so that we would require fewer servers to maintain the load?  He said yes, but PHP is not enough.  I'll have to rewrite big part of your data engines in C and C++.  Let's do that.  He invited the friend of his help him another absolute champion in world programming,  the contest twice in a row.  And they put together the first customized data engine,  which was far more efficient than just relying on my square L and memcached,  because it was, first of all, most specialized model level.  So they rewrote in CC++.  A large chunk of it, for example, the search,  the ad engine because VK had a target as they built that.  These were very efficient,  but eventually the prior messaging part, the public messages part.  At some point we realized there are very few websites online that load faster than VK.  Nice.  I remember in 2009, I went to Silicon Valley.  And I met Mark Zuckerberg first time,  and some of the other core team members of early Facebook.  Remember Facebook was just four or five years old,  and everybody kept asking me,  how come even here in Silicon Valley,  VK loads faster than Facebook?  Everything seems to appear instantly on your website.  What's the secret source?  There was one of the things that made them very curious.