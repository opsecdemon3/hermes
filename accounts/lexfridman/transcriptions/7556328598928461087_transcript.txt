# Transcription for Video 7556328598928461087
Title: A-players vs B-players: Firing B-players increases productivity - cli...
Timestamp: 2025-10-22T19:17:09.013718
==================================================

So important to understand is so wise that it's actually if you're just a little bit careless as a developer,  you couldn't introduce any efficiencies that are going to be very difficult to track down.  Because you don't know that it can be faster.  Like the code doesn't scream at you saying this could be much faster.  So you have to actually, as a craftsman, be very careful when you're writing a color.  And always thinking, can this be done much more efficiently?  And it can be tiny things because they all propagate throughout the code.  So there's a real cost in having a careless developer anywhere in the company.  Is that going to introduce that inefficiency in all the other developers won't know.  They'll just assume it kind of has to be that way.  And so there's a real responsibility for every single individual developer that's building any component of an app like Telegram  to just always ask, okay, can this be done more efficiently?  Can this be done more simply?  And that's like one of the most beautiful aspects the art forms of programming.  Right?  Oh yes, because when you manage to discover a way to simplify things, make them more efficient,  you feel incredibly happy and proud and accomplished.  And to your point, I can recall a few instances in my career where firing an engineer actually resulted to an increase in productivity.  You say you have two Android engineers building their app and then just they just can't make it.  They are not keeping up with the pace of the really visually schedule.  And you think I probably have to hire a third one.  But then you notice that one of them is really weird.  Falling behind this schedule, complaining some of the time doesn't assume responsibility.  And so one of it is just fire this person and you fire this person.  And a few weeks we realize you actually don't need and you never needed the third engineer.  The problem was this guy who created more issues and more problems than he solved.  That is so counterintuitive because in developing tech projects we tend to think that you just throw more people into something and then things get solved miraculously by themselves.  Just because more people means more retention from them.  That's again extremely powerful.  Steve Jobs talked about A players and B players and there's something that happens when you have B players.  We just kind of like the folks you're talking about introduced into a team that gets somehow slow everybody down.  They demotivate everybody.  It's very counterintuitive.  They basically part of the work of creating a great team is removing the B players.  So I just hiring more and generally speaking it's finding the A players quote unquote and removing the people that are slowing things down.  Oh yes because the other thing that people don't realize is how demotivating working with the B players.  Everybody can tell if they're the other person, the other engineer they're working with is really competent.  And if it's very visible if the person is not comfortable, they're asking their own questions.  They keep plugging behind.  And at a certain point, if you're an A player, you get this dissatisfaction.  This feeling that you are not able to realize your full potential, accomplish what you really meant to accomplish.  Because of this person working next to you or pretending to work next to you.  And by the way, in some cases it's not because the person is lazy.  In some cases it's just the mental and intellectual abilities not there.  It's not about experience.  Most often it's about natural ability and persistence.  In 90% of percent of cases it's just the inability to focus on one task for an extended period of time.  No everybody has this ability.  So for people who do have disabilities and insult to work alongside someone who is distracted.  And cannot go deep in the projects that they're responsible for.